# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Final DataFrame with Predicted V2 Data for Each Property
data_v2_final = {
    "Property": ["Property A"] * 4 + ["Property B"] * 4 + ["Property C"] * 4,
    "Blast Date": pd.to_datetime([
        "2024-01-01", "2024-02-01", "2024-03-04", "2024-05-02",  # Property A
        "2024-01-01", "2024-02-01", "2024-03-04", "2024-05-10",  # Property B
        "2024-03-04", "2024-05-10", "2024-06-18", "2024-08-01"   # Property C
    ]),
    "Predicted V2 (in/sec)": [
        0.0191, 0.017, 0.043, 0.021,  # Property A
        0.025, 0.020, 0.028, 0.033,   # Property B
        0.065, 0.036, 0.051, 0.048    # Property C
    ]
}

df_v2 = pd.DataFrame(data_v2_final)

# Define a common x-axis (tick labels) for all subplots
common_dates = pd.date_range(start="2024-01-01", end="2024-08-31", freq='MS')

# Create the Subplots
fig, axs = plt.subplots(2, 2, figsize=(12, 8))
fig.suptitle("Predicted Peak Particle Velocity (PPV) by Property Over Time", fontsize=14)

# Dictionary to map properties to subplot locations
property_axes = {
    "Property A": axs[0, 0],
    "Property B": axs[0, 1],
    "Property C": axs[1, 0]
}

# Plotting Loop for Each Property
for prop, ax in property_axes.items():
    df_prop = df_v2[df_v2["Property"] == prop]
    ax.plot(df_prop["Blast Date"], df_prop["Predicted V2 (in/sec)"],
            marker='o', linestyle='-', linewidth=2, color='blue', markersize=6, label="Predicted V2")
    
    # Add Threshold Line
    ax.axhline(0.5, color='red', linestyle='--', linewidth=1.5, label="USBM Threshold (0.5 in/sec)")
    
    ax.set_title(f"{prop}", fontsize=12)
    ax.set_xlabel("Blast Date")
    ax.set_ylabel("PPV (in/sec)")
    
    # Apply shared x-axis tick labels
    ax.set_xticks(common_dates)
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%m/%y'))
    
    ax.tick_params(axis='x', labelrotation=0)
    ax.grid(True)
    ax.legend(fontsize=9)

# Turn off empty subplot
axs[1, 1].axis('off')

# Adjust Layout
plt.tight_layout(rect=[0, 0.03, 1, 0.95])

# Export Final Graph
plt.savefig("final_ppv_graphs_shared_axis.png", dpi=600, bbox_inches='tight')

# Display Graph
plt.show()

